#!/bin/bash
set -o errexit -o nounset -o pipefail
function -h {
cat <<\USAGE
 USAGE: haproxy_cfg <marathon host:port>

haproxy_cfg generates a config file to run HAProxy on localhost and proxy to a number of backend hosts.

To gracefully reload haproxy:

:; haproxy -f /path/to/config -p /var/run/haproxy.pid -sf $(cat /var/run/haproxy.pid)

USAGE
}; function --help { -h ;}
export LC_ALL=en_US.UTF-8

function header {
  cat <<EOF
global
  daemon
  log 127.0.0.1 local0
  log 127.0.0.1 local1 notice
  maxconn 4096
  user haproxy
  group haproxy

defaults
  log         global
  retries     3
  maxconn     2000
  timeout connect  5000
  timeout client  500000
  timeout server  500000

EOF
}

function marathon_apps {
  z="`curl -H "Accept: text/plain" -s "$1/v2/tasks"`"

  frontend "$z"
  backend "$z"
  portmapping "$z"
}

function frontend {
  cat <<EOF
frontend http-in
  bind *:80
  mode http
  option httplog
  option dontlognull
  option forwardfor
  option http-server-close
  stats enable
  stats uri /haproxy
  stats auth admin:admin

EOF

  while IFS= read 
  do
    set -- $REPLY
    local name="$1"
    local port="$2"
    cat <<EOF
  acl host_${name} path_beg -i /${name}
  use_backend ${name}-${port}_cluster if host_${name}

EOF
  done <<< "$1"
}

function portmapping {
  while IFS= read 
  do
    set -- $REPLY
    local name="$1"
    local port="$2"    
    shift 2
    cat <<EOF

listen ${name}-${port}
  bind 0.0.0.0:$port
  mode tcp
  option tcplog
  balance leastconn
EOF
    while [[ $# -gt 0 ]]
    do
      out "  server ${name}-$# $1"
      shift
    done
  done <<< "$1"
}

function backend {
  while IFS= read 
  do
    set -- $REPLY
    local name="$1"
    local port="$2"
    shift 2
    cat <<EOF

backend ${name}-${port}_cluster
  option httpclose
  option forwardfor
  mode http
  balance leastconn
EOF
    while [[ $# -gt 0 ]]
    do
      out "  server ${name}-$# $1"
      shift
    done
  done <<< "$1"
}

function config {
  header
  marathon_apps "$@"
}

function main {
  config "$@"
}

function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}

if [[ ${1:-} ]] && declare -F | cut -d' ' -f3 | fgrep -qx -- "${1:-}"
then "$@"
else main "$@"
fi